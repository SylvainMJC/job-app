name: Unified CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Permet de déclencher manuellement le workflow
  workflow_dispatch:

jobs:
  backend-build-and-test:
    runs-on: ubuntu-latest
    
    # Configurer Docker-in-Docker pour les tests d'intégration
    services:
      dind:
        image: docker:dind
        options: --privileged
        ports:
          - 2375:2375
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Grant execute permission for gradlew
      run: chmod +x ./backend/gradlew
    
    # Configuration de Docker pour Testcontainers
    - name: Set up Docker
      run: |
        docker info
        echo "TESTCONTAINERS_HOST_OVERRIDE=localhost" >> $GITHUB_ENV
    
    # Cache Gradle dependencies for faster builds
    - name: Setup Gradle cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Build backend
      run: cd backend && ./gradlew build -x test
    
    # Exécuter les tests unitaires
    - name: Run unit tests
      run: cd backend && ./gradlew unitTest
    
    # Exécuter les tests d'intégration avec plus de mémoire et de temps
    - name: Run integration tests
      run: |
        cd backend
        ./gradlew integrationTest --no-daemon --info \
          -Dorg.gradle.jvmargs="-Xmx2g -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError"
      env:
        # Configuration supplémentaire pour TestContainers
        TESTCONTAINERS_REUSE_ENABLE: "true"
        DOCKER_HOST: "tcp://localhost:2375"
    
    - name: Generate JaCoCo reports
      run: cd backend && ./gradlew jacocoTestReport
    
    - name: Upload JaCoCo reports
      uses: actions/upload-artifact@v4
      with:
        name: jacoco-reports
        path: backend/build/reports/jacoco/
  
  frontend-build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    # Setup Node.js pour le frontend
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    # Cache NPM dependencies for faster builds
    - name: Setup Node modules cache
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Install frontend dependencies
      run: cd frontend && npm install
    
    # Run frontend unit tests
    - name: Test frontend
      run: cd frontend && npm run test:unit
    
    - name: Build frontend
      run: cd frontend && npm run build
    
    - name: Upload frontend build
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/

  # Job pour les tests end-to-end avec Playwright
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [frontend-build-and-test]
    
    # Configurer Docker-in-Docker pour exécuter Playwright
    services:
      dind:
        image: docker:dind
        options: --privileged
        ports:
          - 2375:2375
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: cd frontend && npm install
    
    - name: Install Playwright browsers
      run: cd frontend && npx playwright install --with-deps chromium
    
    - name: Start backend for E2E tests
      run: |
        cd backend
        ./gradlew bootRun &
        echo "Waiting for backend to start..."
        sleep 30
      env:
        SPRING_PROFILES_ACTIVE: test
    
    - name: Build and start the frontend
      run: |
        cd frontend
        npm run build
        npm run preview &
        echo "Waiting for frontend to start..."
        sleep 10
    
    - name: Run E2E tests
      run: cd frontend && npm run test:e2e
      env:
        E2E_BASE_URL: http://localhost:4173
        PLAYWRIGHT_DOCKER_HOST: "localhost:2375"
    
    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 30

  # Déploiement uniquement lorsque push sur main
  deploy:
    needs: [backend-build-and-test, frontend-build-and-test, e2e-tests]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download backend reports
      uses: actions/download-artifact@v4
      with:
        name: jacoco-reports
        path: reports/jacoco
    
    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend-dist
    
    # Optionnel: Si vous avez un serveur de déploiement, ajoutez les étapes ici
    - name: Deploy to production
      run: echo "Déploiement en production - Simulation"
      
    - name: Notify deployment success
      run: |
        echo "Application déployée avec succès!"
        echo "Version: $(date +%Y%m%d-%H%M%S)" 