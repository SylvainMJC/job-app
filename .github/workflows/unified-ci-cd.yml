name: Unified CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Permet de déclencher manuellement le workflow
  workflow_dispatch:

jobs:
  backend-build-and-test:
    runs-on: ubuntu-latest
    
    # Configurer Docker-in-Docker pour les tests d'intégration
    services:
      dind:
        image: docker:dind
        options: --privileged
        ports:
          - 2375:2375
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Grant execute permission for gradlew
      run: chmod +x ./backend/gradlew
    
    # Configuration de Docker pour Testcontainers
    - name: Set up Docker
      run: |
        docker info
        echo "TESTCONTAINERS_HOST_OVERRIDE=localhost" >> $GITHUB_ENV
    
    - name: Build backend
      run: cd backend && ./gradlew build -x test
    
    # Exécuter tous les tests (unitaires et intégration)
    - name: Run unit tests
      run: cd backend && ./gradlew unitTest
    
    - name: Run integration tests
      run: cd backend && ./gradlew integrationTest
    
    - name: Generate JaCoCo reports
      run: cd backend && ./gradlew jacocoTestReport
    
    - name: Upload JaCoCo reports
      uses: actions/upload-artifact@v4
      with:
        name: jacoco-reports
        path: backend/build/reports/jacoco/
  
  frontend-build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    # Setup Node.js pour le frontend
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install frontend dependencies
      run: cd frontend && npm install
    
    - name: Build frontend
      run: cd frontend && npm run build
    
    # Optionnel: Tests frontend
    # - name: Test frontend
    #   run: cd frontend && npm test
    
    - name: Upload frontend build
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/

  # Déploiement uniquement lorsque push sur main
  deploy:
    needs: [backend-build-and-test, frontend-build]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download backend reports
      uses: actions/download-artifact@v4
      with:
        name: jacoco-reports
        path: reports/jacoco
    
    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend-dist
    
    # Optionnel: Si vous avez un serveur de déploiement, ajoutez les étapes ici
    - name: Deploy to production
      run: echo "Déploiement en production - Simulation"
      
    - name: Notify deployment success
      run: |
        echo "Application déployée avec succès!"
        echo "Version: $(date +%Y%m%d-%H%M%S)" 