name: Unified CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Permet de déclencher manuellement le workflow
  workflow_dispatch:

jobs:
  backend-build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Grant execute permission for gradlew
      run: chmod +x ./backend/gradlew
    
    - name: Build backend
      run: cd backend && ./gradlew assemble
    
    - name: Upload backend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: backend/build/libs/
        retention-days: 1

  backend-unit-tests:
    needs: [backend-build]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Grant execute permission for gradlew
      run: chmod +x ./backend/gradlew
    
    # Télécharger les artefacts de build pour éviter de recompiler
    - name: Download backend build
      uses: actions/download-artifact@v4
      with:
        name: backend-build
        path: backend/build/libs/
    
    # Vérification des tests unitaires disponibles
    - name: List unit test files
      run: find backend/src/test/unit -name "*.java" | sort
    
    - name: Run unit tests
      run: cd backend && ./gradlew unitTest -i
    
    - name: Generate JaCoCo report for unit tests
      run: cd backend && ./gradlew jacocoUnitTestReport
    
    - name: Upload JaCoCo unit test reports
      uses: actions/upload-artifact@v4
      with:
        name: jacoco-unit-reports
        path: backend/build/reports/jacoco/unit/
        retention-days: 7

  backend-integration-tests:
    needs: [backend-build]
    runs-on: ubuntu-latest
    
    # Configurer Docker-in-Docker pour les tests d'intégration
    services:
      dind:
        image: docker:dind
        options: --privileged
        ports:
          - 2375:2375
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Grant execute permission for gradlew
      run: chmod +x ./backend/gradlew
    
    # Télécharger les artefacts de build pour éviter de recompiler
    - name: Download backend build
      uses: actions/download-artifact@v4
      with:
        name: backend-build
        path: backend/build/libs/
    
    # Configuration de Docker pour Testcontainers
    - name: Set up Docker
      run: |
        docker info
        echo "TESTCONTAINERS_HOST_OVERRIDE=localhost" >> $GITHUB_ENV
    
    # Vérification des tests d'intégration disponibles
    - name: List integration test files
      run: find backend/src/test/integration -name "*.java" | sort
    
    - name: Run integration tests
      run: cd backend && ./gradlew integrationTest -i
      continue-on-error: true  # Allow tests to fail but continue the workflow
    
    - name: Generate JaCoCo report for integration tests
      run: cd backend && ./gradlew jacocoIntegrationTestReport
      continue-on-error: true
    
    - name: Upload JaCoCo integration test reports
      uses: actions/upload-artifact@v4
      with:
        name: jacoco-integration-reports
        path: backend/build/reports/jacoco/integration/
        retention-days: 7
      if: always()  # Always upload even if tests fail
  
  frontend-build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    # Setup Node.js pour le frontend
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install frontend dependencies
      run: cd frontend && npm install
    
    - name: Build frontend
      run: cd frontend && npm run build
    
    - name: Upload frontend build
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/
        retention-days: 1

  frontend-unit-tests:
    needs: [frontend-build]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    # Setup Node.js pour le frontend
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install frontend dependencies
      run: cd frontend && npm install
    
    # Run frontend unit tests
    - name: Test frontend
      run: cd frontend && npm run test:unit
      continue-on-error: true
    
    - name: Upload unit test report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-coverage
        path: frontend/coverage/
        retention-days: 7

  # Job pour les tests de performance avec JMeter
  performance-tests:
    runs-on: ubuntu-latest
    needs: [backend-build]
    
    # Configurer Docker-in-Docker pour exécuter JMeter
    services:
      dind:
        image: docker:dind
        options: --privileged
        ports:
          - 2375:2375
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker
      uses: docker/setup-buildx-action@v2
      with:
        driver-opts: network=host
    
    - name: Download backend build
      uses: actions/download-artifact@v4
      with:
        name: backend-build
        path: backend/build/libs/
    
    - name: Set execute permission for jar
      run: chmod +x backend/build/libs/*.jar
    
    - name: Start backend for performance tests
      run: |
        cd backend
        # Afficher le port de l'application
        grep -r "server.port" src/main/resources/application*.properties || echo "Using default port 8080"
        
        # Démarrer l'application avec un port explicite
        java -jar build/libs/*.jar --server.port=8080 &
        
        echo "Waiting for backend to start..."
        # Attendre plus longtemps pour s'assurer que l'application est prête
        sleep 45
        
        # Vérifier que l'application est accessible
        curl -v http://localhost:8080/actuator/health || echo "Health check failed but continuing"
        
        # Vérifier le endpoint d'API
        curl -v http://localhost:8080/api/offres || echo "API check failed but continuing"
        
        # Vérifier si le port est ouvert
        echo "Checking port 8080..."
        if command -v nc &> /dev/null; then
          nc -z -v localhost 8080 || echo "Port check failed but continuing"
        else
          echo "netcat not available, skipping port check"
        fi
        
        # Vérifier les processus en écoute
        echo "Processes listening on port 8080:"
        lsof -i :8080 || netstat -tuln | grep 8080 || ss -tuln | grep 8080 || echo "No port info tools available"
      env:
        SPRING_PROFILES_ACTIVE: test
    
    - name: Build JMeter Docker image
      run: |
        cd backend/src/test/jmeter
        docker build -t jmeter-performance-tests .
        
    - name: Verify JMeter test files in Docker image
      run: |
        docker run --rm jmeter-performance-tests ls -la /jmeter/test-plan/
    
    - name: Run JMeter performance tests
      run: |
        # Créer le répertoire pour les rapports
        mkdir -p backend/src/test/jmeter/reports
        
        # Obtenir l'adresse IP locale à utiliser au lieu de localhost
        HOST_IP=$(hostname -I | awk '{print $1}')
        echo "Host IP: $HOST_IP"
        
        # Exécuter les tests de performance avec accès à l'hôte
        docker run --rm \
          --network host \
          --add-host=host.docker.internal:host-gateway \
          -v ${{ github.workspace }}/backend/src/test/jmeter/reports:/jmeter/reports \
          jmeter-performance-tests \
          "host.docker.internal" "8080" "http" "10" "5" "30"
      continue-on-error: true
    
    - name: Archive performance test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-reports
        path: backend/src/test/jmeter/reports/
        retention-days: 7
    
    - name: Generate performance summary
      if: always()
      run: |
        echo "# Performance Test Summary" > performance-summary.md
        echo "## Test Configuration" >> performance-summary.md
        echo "- Threads: 10" >> performance-summary.md
        echo "- Ramp-up: 5 seconds" >> performance-summary.md
        echo "- Duration: 30 seconds" >> performance-summary.md
        echo "" >> performance-summary.md
        echo "## Results" >> performance-summary.md
        
        if [ -f backend/src/test/jmeter/reports/statistics.json ]; then
          echo "- Status: Success" >> performance-summary.md
          echo "- [Detailed Report Available](../artifacts/performance-test-reports/index.html)" >> performance-summary.md
        else
          echo "- Status: Failed" >> performance-summary.md
          echo "- No statistics available" >> performance-summary.md
        fi
    
    - name: Upload performance summary
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-summary
        path: performance-summary.md
        retention-days: 7

  # Job pour les tests end-to-end avec Playwright
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build]
    
    # Configurer Docker-in-Docker pour exécuter Playwright
    services:
      dind:
        image: docker:dind
        options: --privileged
        ports:
          - 2375:2375
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: cd frontend && npm install
    
    - name: Install Playwright browsers
      run: cd frontend && npx playwright install --with-deps chromium
    
    - name: Download backend build
      uses: actions/download-artifact@v4
      with:
        name: backend-build
        path: backend/build/libs/
    
    - name: Set execute permission for jar
      run: chmod +x backend/build/libs/*.jar
    
    - name: Start backend for E2E tests
      run: |
        cd backend
        java -jar build/libs/*.jar &
        echo "Waiting for backend to start..."
        sleep 30
      env:
        SPRING_PROFILES_ACTIVE: test
    
    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/
    
    - name: Start the frontend
      run: |
        cd frontend
        npm run preview &
        echo "Waiting for frontend to start..."
        sleep 10
    
    - name: Run E2E tests
      run: cd frontend && npm run test:e2e
      env:
        E2E_BASE_URL: http://localhost:4173
        PLAYWRIGHT_DOCKER_HOST: "localhost:2375"
      continue-on-error: true
    
    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 7

  # Rapport de qualité code et déploiement (Jobs fusionnés)
  code-quality-and-deploy:
    needs: [backend-unit-tests, backend-integration-tests, frontend-unit-tests, e2e-tests, performance-tests]
    runs-on: ubuntu-latest
    if: always() # Run even if some tests failed
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download JaCoCo unit test reports
      uses: actions/download-artifact@v4
      with:
        name: jacoco-unit-reports
        path: reports/jacoco/unit
      continue-on-error: true
    
    - name: Download JaCoCo integration test reports
      uses: actions/download-artifact@v4
      with:
        name: jacoco-integration-reports
        path: reports/jacoco/integration
      continue-on-error: true
    
    - name: Download frontend unit test reports
      uses: actions/download-artifact@v4
      with:
        name: frontend-coverage
        path: reports/frontend-coverage
      continue-on-error: true
    
    - name: Download performance test summary
      uses: actions/download-artifact@v4
      with:
        name: performance-summary
        path: reports/performance
      continue-on-error: true
    
    - name: Generate summary
      run: |
        echo "# Test Coverage Summary" > coverage-summary.md
        echo "## Backend Unit Tests" >> coverage-summary.md
        echo "- OffreTest: Test des propriétés et de l'égalité des offres" >> coverage-summary.md
        echo "- OffreControllerTest: Test des méthodes du contrôleur avec des mocks" >> coverage-summary.md
        echo "" >> coverage-summary.md
        echo "## Backend Integration Tests" >> coverage-summary.md
        echo "- OffreControllerIT: Test du contrôleur avec la base de données réelle" >> coverage-summary.md
        echo "- OffreRepositoryIT: Test du repository avec une base PostgreSQL" >> coverage-summary.md
        echo "" >> coverage-summary.md
        echo "## Frontend Unit Tests" >> coverage-summary.md
        echo "- LoginView.spec.js: Test du composant de login" >> coverage-summary.md
        echo "- OffresView.spec.js: Test du composant d'affichage des offres" >> coverage-summary.md
        echo "" >> coverage-summary.md
        echo "## Performance Tests" >> coverage-summary.md
        if [ -f reports/performance/performance-summary.md ]; then
          cat reports/performance/performance-summary.md >> coverage-summary.md
        else
          echo "- Performance test results not available" >> coverage-summary.md
        fi
    
    - name: Upload summary
      uses: actions/upload-artifact@v4
      with:
        name: test-summary
        path: coverage-summary.md
        retention-days: 7
    
    # Déploiement uniquement lorsque push sur main
    - name: Download backend build for deployment
      if: github.ref == 'refs/heads/main'
      uses: actions/download-artifact@v4
      with:
        name: backend-build
        path: backend-build
    
    - name: Download frontend build for deployment
      if: github.ref == 'refs/heads/main'
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend-dist
    
    - name: Display test summary
      run: cat coverage-summary.md
    
    # Optionnel: Si vous avez un serveur de déploiement, ajoutez les étapes ici
    - name: Deploy to production
      if: github.ref == 'refs/heads/main'
      run: echo "Déploiement en production - Simulation"
      
    - name: Notify deployment success
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Application déployée avec succès!"
        echo "Version: $(date +%Y%m%d-%H%M%S)" 