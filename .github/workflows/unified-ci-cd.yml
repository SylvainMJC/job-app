name: Unified CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Permet de déclencher manuellement le workflow
  workflow_dispatch:

jobs:
  backend-build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Grant execute permission for gradlew
      run: chmod +x ./backend/gradlew
    
    - name: Build backend
      run: cd backend && ./gradlew assemble
    
    - name: Upload backend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: backend/build/libs/
        retention-days: 1

  backend-unit-tests:
    needs: [backend-build]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Grant execute permission for gradlew
      run: chmod +x ./backend/gradlew
    
    - name: Run unit tests
      run: cd backend && ./gradlew unitTest
    
    - name: Generate JaCoCo report for unit tests
      run: cd backend && ./gradlew jacocoUnitTestReport
    
    - name: Upload JaCoCo unit test reports
      uses: actions/upload-artifact@v4
      with:
        name: jacoco-unit-reports
        path: backend/build/reports/jacoco/unit/

  backend-integration-tests:
    needs: [backend-build]
    runs-on: ubuntu-latest
    
    # Configurer Docker-in-Docker pour les tests d'intégration
    services:
      dind:
        image: docker:dind
        options: --privileged
        ports:
          - 2375:2375
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Grant execute permission for gradlew
      run: chmod +x ./backend/gradlew
    
    # Download backend build artifacts
    - name: Download backend build
      uses: actions/download-artifact@v4
      with:
        name: backend-build
        path: backend/build/libs/
    
    # Configuration de Docker pour Testcontainers
    - name: Set up Docker
      run: |
        docker info
        echo "TESTCONTAINERS_HOST_OVERRIDE=localhost" >> $GITHUB_ENV
        echo "TESTCONTAINERS_REUSE_ENABLE=true" >> $GITHUB_ENV
        echo "JAVA_TOOL_OPTIONS=-Djava.net.preferIPv4Stack=true" >> $GITHUB_ENV
      
    # Augmenter la mémoire disponible pour Gradle
    - name: Setup Gradle properties
      run: |
        mkdir -p ~/.gradle
        echo "org.gradle.jvmargs=-Xmx2g -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError" > ~/.gradle/gradle.properties
        echo "org.gradle.daemon=false" >> ~/.gradle/gradle.properties
    
    - name: Run integration tests
      run: cd backend && ./gradlew integrationTest --info
    
    - name: Generate JaCoCo report for integration tests
      if: always()
      run: cd backend && ./gradlew jacocoIntegrationTestReport
    
    - name: Upload JaCoCo integration test reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: jacoco-integration-reports
        path: backend/build/reports/jacoco/integration/
    
    - name: Upload test reports
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-reports
        path: backend/build/reports/tests/integrationTest/

  frontend-build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    # Setup Node.js pour le frontend
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install frontend dependencies
      run: cd frontend && npm install
    
    - name: Build frontend
      run: cd frontend && npm run build
    
    - name: Upload frontend build
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/
        retention-days: 1

  frontend-unit-tests:
    needs: [frontend-build]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    # Setup Node.js pour le frontend
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install frontend dependencies
      run: cd frontend && npm install
    
    # Run frontend unit tests
    - name: Test frontend
      run: cd frontend && npm run test:unit
    
    - name: Upload unit test report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-unit-test-report
        path: frontend/coverage/
        retention-days: 1

  # Job pour les tests end-to-end avec Playwright
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build]
    
    # Configurer Docker-in-Docker pour exécuter Playwright
    services:
      dind:
        image: docker:dind
        options: --privileged
        ports:
          - 2375:2375
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: cd frontend && npm install
    
    - name: Install Playwright browsers
      run: cd frontend && npx playwright install --with-deps chromium
    
    - name: Download backend build
      uses: actions/download-artifact@v4
      with:
        name: backend-build
        path: backend/build/libs/
    
    - name: Set execute permission for jar
      run: chmod +x backend/build/libs/*.jar
    
    - name: Start backend for E2E tests
      run: |
        cd backend
        java -jar build/libs/*.jar &
        echo "Waiting for backend to start..."
        sleep 30
      env:
        SPRING_PROFILES_ACTIVE: test
    
    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/
    
    - name: Start the frontend
      run: |
        cd frontend
        npm run preview &
        echo "Waiting for frontend to start..."
        sleep 10
    
    - name: Run E2E tests
      run: cd frontend && npm run test:e2e
      env:
        E2E_BASE_URL: http://localhost:4173
        PLAYWRIGHT_DOCKER_HOST: "localhost:2375"
    
    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 7

  # Rapport de couverture consolidé
  code-quality:
    needs: [backend-unit-tests, backend-integration-tests, frontend-unit-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download JaCoCo unit test reports
      uses: actions/download-artifact@v4
      with:
        name: jacoco-unit-reports
        path: reports/jacoco/unit
    
    - name: Download JaCoCo integration test reports
      uses: actions/download-artifact@v4
      with:
        name: jacoco-integration-reports
        path: reports/jacoco/integration
    
    - name: Download frontend unit test reports
      uses: actions/download-artifact@v4
      with:
        name: frontend-unit-test-report
        path: reports/frontend-coverage
    
    - name: Generate summary
      run: |
        echo "# Test Coverage Summary" > coverage-summary.md
        echo "## Backend Unit Tests" >> coverage-summary.md
        echo "- Coverage details available in artifacts" >> coverage-summary.md
        echo "## Backend Integration Tests" >> coverage-summary.md
        echo "- Coverage details available in artifacts" >> coverage-summary.md
        echo "## Frontend Unit Tests" >> coverage-summary.md
        echo "- Coverage details available in artifacts" >> coverage-summary.md
    
    - name: Upload summary
      uses: actions/upload-artifact@v4
      with:
        name: coverage-summary
        path: coverage-summary.md
        retention-days: 7

  # Déploiement uniquement lorsque push sur main
  deploy:
    needs: [backend-unit-tests, backend-integration-tests, frontend-unit-tests, e2e-tests]
    if: github.ref == 'refs/heads/main' && success()
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download backend build
      uses: actions/download-artifact@v4
      with:
        name: backend-build
        path: backend-build
    
    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend-dist
    
    # Optionnel: Si vous avez un serveur de déploiement, ajoutez les étapes ici
    - name: Deploy to production
      run: echo "Déploiement en production - Simulation"
      
    - name: Notify deployment success
      run: |
        echo "Application déployée avec succès!"
        echo "Version: $(date +%Y%m%d-%H%M%S)" 