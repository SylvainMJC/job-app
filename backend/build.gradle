plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'fr.epsi.b3devc1.sylvainmjc'
version = '0.0.1-SNAPSHOT'

// Configuration Java 17
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
}


ext {
    testcontainersVersion = '1.19.8'
}

// Définition des source sets pour les tests
sourceSets {
    test {
        java {
            srcDirs = ['src/test/unit/java', 'src/test/integration/java']
        }
        resources {
            srcDirs = ['src/test/unit/resources', 'src/test/integration/resources']
        }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.postgresql:postgresql'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    
    // Test dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.1'
    testImplementation 'org.mockito:mockito-core:5.10.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.10.0'
    testImplementation 'com.h2database:h2:2.2.224'
    testImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
    testImplementation "org.testcontainers:postgresql:${testcontainersVersion}"
    
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// Task pour tests unitaires 
task unitTest(type: Test) {
    description = 'Runs unit tests.'
    group = 'verification'
    
    useJUnitPlatform {
        includeTags 'unit'
        excludeTags 'integration'
    }
    
    // Définit le profil Spring Boot pour les tests unitaires
    systemProperty 'spring.profiles.active', 'test'
    
    jacoco {
        destinationFile = file("${buildDir}/jacoco/unitTest.exec")
    }
}

// Task pour tests d'intégration
task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'
    
    useJUnitPlatform {
        includeTags 'integration'
        excludeTags 'unit'
    }
    
    // Définit le profil Spring Boot pour les tests d'intégration
    systemProperty 'spring.profiles.active', 'integration'
    
    jacoco {
        destinationFile = file("${buildDir}/jacoco/integrationTest.exec")
    }
}

// Configuration des tests par défaut
test {
    useJUnitPlatform()
    
    jacoco {
        destinationFile = file("${buildDir}/jacoco/test.exec")
    }
    
    finalizedBy jacocoTestReport
}

// Rapport JaCoCo pour les tests
jacocoTestReport {
    dependsOn test
    
    reports {
        xml.required = true
        html.required = true
    }
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/*Application.class",
                    "**/*Config.class",
                    "**/entity/**",
                    "**/dto/**"
            ])
        }))
    }
}

// Rapport JaCoCo pour les tests unitaires
task jacocoUnitTestReport(type: JacocoReport) {
    description = 'Generates JaCoCo report for unit tests.'
    group = 'reporting'
    
    dependsOn unitTest
    
    executionData file("${buildDir}/jacoco/unitTest.exec")
    sourceDirectories.from sourceSets.main.java
    classDirectories.from sourceSets.main.output.classesDirs
    
    reports {
        xml.required = true
        xml.outputLocation = file("${buildDir}/reports/jacoco/unit/jacocoUnitTestReport.xml")
        html.required = true
        html.outputLocation = file("${buildDir}/reports/jacoco/unit/html")
    }
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/*Application.class",
                    "**/*Config.class",
                    "**/entity/**",
                    "**/dto/**"
            ])
        }))
    }
}

// Rapport JaCoCo pour les tests d'intégration
task jacocoIntegrationTestReport(type: JacocoReport) {
    description = 'Generates JaCoCo report for integration tests.'
    group = 'reporting'
    
    dependsOn integrationTest
    
    executionData file("${buildDir}/jacoco/integrationTest.exec")
    sourceDirectories.from sourceSets.main.java
    classDirectories.from sourceSets.main.output.classesDirs
    
    reports {
        xml.required = true
        xml.outputLocation = file("${buildDir}/reports/jacoco/integration/jacocoIntegrationTestReport.xml")
        html.required = true
        html.outputLocation = file("${buildDir}/reports/jacoco/integration/html")
    }
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/*Application.class",
                    "**/*Config.class",
                    "**/entity/**",
                    "**/dto/**"
            ])
        }))
    }
}

// Tâche pour exécuter tous les tests (unitaires + intégration)
task allTests {
    description = 'Runs all tests and generates reports.'
    group = 'verification'
    
    dependsOn jacocoUnitTestReport, jacocoIntegrationTestReport
}
