plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'fr.epsi.b3devc1.sylvainmjc'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

ext {
    testcontainersVersion = '1.19.8' // Version stable actuelle de TestContainers
}

// Définition des source sets pour séparer les tests unitaires et d'intégration
sourceSets {
    unitTest {
        java.srcDir file('src/test/unit/java')
        resources.srcDir file('src/test/unit/resources')
        compileClasspath += sourceSets.main.output + configurations.testImplementation
        runtimeClasspath += output + compileClasspath + configurations.testRuntimeOnly
    }
    
    integrationTest {
        java.srcDir file('src/test/integration/java')
        resources.srcDir file('src/test/integration/resources')
        compileClasspath += sourceSets.main.output + configurations.testImplementation
        runtimeClasspath += output + compileClasspath + configurations.testRuntimeOnly
    }
}

// Configuration des dépendances pour les sources sets personnalisés
configurations {
    unitTestImplementation.extendsFrom testImplementation
    unitTestRuntimeOnly.extendsFrom testRuntimeOnly
    
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.postgresql:postgresql'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    
    // Test dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.1'
    testImplementation 'org.mockito:mockito-core:5.10.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.10.0'
    
    // Dépendances pour les tests unitaires
    unitTestImplementation 'com.h2database:h2:2.2.224'
    
    // Dépendances pour les tests d'intégration  
    integrationTestImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"
    integrationTestImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
    integrationTestImplementation "org.testcontainers:postgresql:${testcontainersVersion}"
    
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// Task for unit tests
task unitTest(type: Test) {
    description = 'Runs unit tests.'
    group = 'verification'
    
    testClassesDirs = sourceSets.unitTest.output.classesDirs
    classpath = sourceSets.unitTest.runtimeClasspath
    
    // Définit le profil Spring Boot pour les tests unitaires
    systemProperty 'spring.profiles.active', 'test'
    
    useJUnitPlatform()
    
    // Configuration du rapport JaCoCo pour les tests unitaires
    jacoco {
        destinationFile = file("${buildDir}/jacoco/unitTest.exec")
    }
}

// Task for integration tests
task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'
    
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    
    // Définit le profil Spring Boot pour les tests d'intégration
    systemProperty 'spring.profiles.active', 'integration'
    
    useJUnitPlatform()
    
    // Configuration du rapport JaCoCo pour les tests d'intégration
    jacoco {
        destinationFile = file("${buildDir}/jacoco/integrationTest.exec")
    }
}

// Rapport JaCoCo pour les tests unitaires
task jacocoUnitTestReport(type: JacocoReport) {
    description = 'Generates JaCoCo report for unit tests.'
    group = 'reporting'
    
    dependsOn unitTest
    
    executionData file("${buildDir}/jacoco/unitTest.exec")
    sourceDirectories.from sourceSets.main.java
    classDirectories.from sourceSets.main.output.classesDirs
    
    reports {
        xml.required = true
        xml.outputLocation = file("${buildDir}/reports/jacoco/unit/jacocoUnitTestReport.xml")
        html.required = true
        html.outputLocation = file("${buildDir}/reports/jacoco/unit/html")
    }
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/*Application.class",
                    "**/*Config.class",
                    "**/entity/**",
                    "**/dto/**"
            ])
        }))
    }
}

// Rapport JaCoCo pour les tests d'intégration
task jacocoIntegrationTestReport(type: JacocoReport) {
    description = 'Generates JaCoCo report for integration tests.'
    group = 'reporting'
    
    dependsOn integrationTest
    
    executionData file("${buildDir}/jacoco/integrationTest.exec")
    sourceDirectories.from sourceSets.main.java
    classDirectories.from sourceSets.main.output.classesDirs
    
    reports {
        xml.required = true
        xml.outputLocation = file("${buildDir}/reports/jacoco/integration/jacocoIntegrationTestReport.xml")
        html.required = true
        html.outputLocation = file("${buildDir}/reports/jacoco/integration/html")
    }
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/*Application.class",
                    "**/*Config.class",
                    "**/entity/**",
                    "**/dto/**"
            ])
        }))
    }
}

// Remplacer la tâche test standard pour exécuter les tests unitaires
test {
    dependsOn unitTest
    enabled = false
}

// Tâche pour exécuter tous les tests (unitaires + intégration)
task allTests {
    description = 'Runs all tests and generates reports.'
    group = 'verification'
    
    dependsOn jacocoUnitTestReport, jacocoIntegrationTestReport
}
